package com.asteroid.expression.common.util.generate;

import org.apache.commons.lang.StringUtils;
import org.w3c.dom.Document;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.*;

public class VarUtil {

	public static enum CharType{
		CH_COMMON,EN_CHARS,NUMBER,LAST_NAME,STATE_ABBR
	}

	public static Map<CharType,String> CHAR_MAP=new HashMap<CharType,String>();
	public static Map<String, String[]> AREA_CODE_MAP = new HashMap<String,String[]>();
	public static Map<String,String[]> CITY_MAP=new HashMap<String,String[]>();

	static {
		CHAR_MAP.put(CharType.CH_COMMON, "二十厂七人入八几儿了乃又三亏工土下丈与不上小口巾乞亿个勺久凡丸亡尸已子也女刃叉乡专扎艺木厅太犬匹牙屯比互切瓦日冈内见午手气升什片币仅斤爪反父今凶分乏仓月氏勿欠匀火为斗忆订认心尺引队办予劝幻刊末未击打正" +
				"扒扔去术右灭轧卡旧且旦目叮电号只央兄叼叫另叨叹四失付仗们仔他斥瓜乎甩句匆册犯外处冬鸟饥主立半汁汇头穴它讨写训必议讯记尼民奶奴加发孕对矛纠幼丝式动扛寺扣托执圾扩扫地场耳共亚芝朽臣再协西压厌存而页匠夸夺" + 
				"列死夹轨邪划迈至此贞尘尖劣当早吐吓虫团吊吃因吸吗屿帆岁岂则肉网先丢舌迁传乒乓优伐件伤价份仿伙伪自血舟会杀企众爷伞创肌朵杂旬旨负各名争色壮冲冰亦交产决妄闯并灯州污忙宅讲论讽设访迅尽导异阵收阶防奸如妇好" + 
				"妈观欢纤级约驰巡弄形戒吞远违抚坛技坏扰拒找批扯址走坝攻抓扮抢均抛投坟坑坊抖护壳志扭块把报劫芽芹芬芳芦克杆杠材村杏极更两丽医辰否还歼旱盯呈助县里呆园围呀吨足邮男困吵串听吩吹呜吧吼岗帐财钉我乱秃秀私每兵" + 
				"体伸作伶佣低你住伴身皂近彻役返坐妥含邻岔肝肚肠龟免角删条卵岛迎饭饮冻状亩床疗这序弃冶忘闲间闷判灶灿弟汽泛沟没沉忧快究穷灾证启评补社识诉诊词译君灵即层尿忌际阻附妙妖妨努忍劲鸡驱纯纱纲驳纷纸纹纺驴纽玩责" + 
				"规抹拢拔拣担坦押抽拐拖拍者顶拆拥抵拘抱垃拉拦拌坡披拨择抬取若苹直茄茎杯柜枪构杰述枕丧或画卧事刺枣雨卖矿码厕奔奋态垄妻轰顷转斩轮软到非肯齿些虏肾贤旺具味昆固忠咐鸣咏呢岸岩帜岭凯败贩购图钓制知垂物乖刮秆" + 
				"供使例版侄侦侧佩货的迫质欣征往爬彼径舍命斧爸采乳贪贫肤肺肢肿胀股服胁昏兔狐忽狗备饰饱饲变享店夜庙底剂郊废净盲放刻育闸闹券炒炊炕炎炉沫浅泄河沾泪油泊沿泡注泻泳沸泼泽治怖怕怜怪审宙帘试肩诚衬衫视话诞询该" + 
				"肃录隶届刷弦孤降限妹姑姐驾参艰组细驶织驻驼奏帮珍玻毒型挂持垮挎挠政赴挡挺括拴拾挑指垫挣挤拼挖按挥挪某甚荐巷带草茧茶荒茫荡故药标枯柄柱柿栏要歪研砖厘砌砍面耐耍残殃轻鸦皆背点临览竖省削尝盼眨哄显哑映昨畏" + 
				"胃界虹虾思蚂虽品咽骂哗咱响咬咳哪炭峡罚贱贴骨钢钥钩卸缸看矩怎牲选适秒科重复竿便俩贷顺促侮俭俗俘鬼侵追俊盾待很叙逃食盆胆胜胞胖脉勉狭狮狡狱狠怨急蚀饺饼弯奖亭亮迹庭疮疯疫疤姿亲音帝阀阁差美叛送迷逆总炼炸" + 
				"烂剃洁洒浇浊洞测洗活派洽染济洲浓恒恢恰恼恨举觉室宪突穿窃客语扁袄神误诱诵垦退既屋昼陡眉孩除险院娃姥姨姻娇怒架怠垒绑绒结绕骄绘给络绝绞统耕耗艳珠蚕顽盏匪捞栽捕振赶起盐捎捏埋捉捆捐损哲逝捡换挽热恐壶挨耻" + 
				"莲荷获恶框档株桃格核样根哥逗配翅辱唇础破套逐烈殊轿较毙致桌虑监紧晒眠晓鸭晃晌晕蚊哨哭恩唤啊唉罢峰圆贼贿钳钻铃铅缺氧特牺造敌秤租积秧秩透笔笑笋债借值倚倾倒倘俱倡俯倍倦健臭射躬息徒舰舱般航途拿爹颂脆脂胸" + 
				"脏胶脑狸狼皱饿恋桨浆衰准座脊症病疾疼疲效离凉站剖竞部畜阅羞瓶拳粉料兼烤烘烦烧烛递涛涝涉消浩浴流润浪浸涨烫涌悄悔悦害宽宵宴窄案请朗读扇袜袖袍被祥课谁调冤谅谊剥恳屑弱陵陷陪娱娘难预绢绣验继球捧描域掩排掉" + 
				"推掀授教掏掠培控探据掘职基著勒萌萝菌菜萄菊萍菠械梦梢梳梯桶救副票爽聋辅辆虚匙晨睁眯眼悬啦晚啄距跃略蛇累唱患唯崖崭圈铜铲甜梨移笨笼笛做袋悠偿偷您售停偏假得衔船斜盒鸽欲彩领脚脖脸够猜猪猎猫猛馅馆凑减毫痒" + 
				"廊庸盗竟族旋率着粗粒断剪兽添淋淹渐混渔淘液深婆渗情惜惭悼惧惕惊惨惯寄窑密谋谎祸谜敢弹蛋婚婶颈绩维绵绸绿斑替款堪搭趁趋超提堤博插揪搜煮援裁搁搂搅握揉期欺联散惹葬葡葱落朝葵棒棋椅椒棵棍棉棚棕惑逼厨厦硬确" + 
				"殖裂雄暂雅辈悲敞晴暑最量喷晶喇喊践跌跑遗蛙蛛蜓喝喂喘喉幅帽赌赔铸铺链销锄锅锈锋短毯鹅剩稍稀筐等筑策筛筒筋筝傲牌堡傍奥街惩循艇番腊脾腔猾猴然馋装就痛阔羡粪尊焰湖渣湿渴湾渡滋溉愤慌惰愧愉慨割窜窝窗遍裕裤" + 
				"谣谦属屡粥隔隙絮嫂缎缓编骗缘魂肆摄摸填搏塌鼓摆携搬摇搞塘摊蒜鹊墓幕蓄蒸献禁想槐榆概酬感碍碑碎碰碗碌雾雹输龄鉴睛睡睬鄙暖盟歇暗照跨跳跪跟遣蛾蜂嗓置罪罩锡锣锤锦键锯矮辞稠愁筹签毁舅鼠催傻像躲微遥腰腥腹腿" + 
				"酱痰意粮数煎塑煤煌漠滤滥滔溪溜滚滨粱滩誉谨群殿障嫌嫁叠缝缠静璃墙撇摧截誓境摘摔聚蔽暮蔑模榴榜榨歌遭酷酿酸磁愿需弊裳颗嗽蜻蜡蝇蜘赚锹锻舞稳算箩僚鼻魄貌膜膊膀疑馒裹敲豪膏遮腐瘦辣精歉熄熔漂滴演漏慢寨察蜜" + 
				"嫩凳骡缩慧撕趣趟撑播撞撤增聪鞋蕉蔬横槽樱橡飘醋醉震霉瞒题瞎影踢踏踩踪蝶蝴嘱靠稻稿稼箱箭篇僵躺僻艘膝膛熟毅糊遵懂额慰劈薯薪颠橘整醒餐嘴蹄器赠默赞篮邀膨雕凝辨辩糖糕燃澡激懒壁避缴擦霞瞧蹈螺穗辫赢糟糠燥臂" + 
				"骤鞭覆蹦镰翻鹰警攀蹲颤瓣爆疆壤耀躁嚼嚷魔灌蠢霸露囊罐匕丐歹夭仑讥冗夯凸叭叽皿凹囚矢乍邦迂芋芍吏吁吆屹廷迄臼肋旭匈凫妆汛讳讶讹讼诀弛阱驮驯纫玖玛韧抠扼汞扳抡坎坞抑拟抒芙芜苇芥芯芭杖杉杈匣轩卤吱吠呕呐吟" + 
				"吻吭邑囤吮岖牡佑佃伺囱肛肘甸狈鸠灸刨庇吝庐闰兑灼沛汰沥沦汹沧忱诅诈屁坠妓姊妒纬玫卦坷坯拓坪坤拄拧拂拙拇拗茉苛苫苞茁苔枉枢枫矾奄殴昙哎咕呵咙呻咒咆咖帕账贬贮氛秉侠侥侣侈刽刹肴觅忿肮肪狞疟疙疚卒氓炬沽沮" + 
				"泌沼怔怯宠衩诡帚屉弧陋陌姆虱叁绅绊绎契玷玲珊拭拷挟垢垛拯茸茬荚茵茴荞荠荧荔栈柑栅柠枷勃柬砂泵砚鸥轴韭虐昧盹咧昵昭盅勋哆咪哟幽钙钝钠钧毡氢秕俏俄俐徊衍胚胧胎狰饵峦咨飒闺籽烁炫洼柒涎恃恍恬恤诫诬祠诲屏屎" + 
				"陨娜蚤骇耘耙匿埂捂捍捌挫挚捣捅埃荸莽莉莹莺梆栖桦栓桅桩酌砸砰砾殉逞哮唠哺剔蚌蚜畔蚣蚪蚓哩圃鸯唁哼唆峭唧峻赂赃钾铆氨秫笆俺赁倔耸舀豺豹颁胯胰脐脓逛鸵鸳馁凄疹紊瓷羔烙涡涣涤涧涕涩悍悯窍诽袒谆祟恕娩骏琐麸" + 
				"琅措捺捶赦埠捻掐掂掖掷掸掺勘娶菱菲萎菩萤菇彬梗梧梭酝酗厢硅奢盔匾颅彪眶晤曼晦冕啡畦趾啃蛆蚯蛉蛀唬唾啤啥啸崎逻崩婴赊铐铛铝铡铣铭秸秽笙笤偎傀躯兜徘徙舶舷舵翎脯逸凰猖烹庶庵痊阐眷焊焕鸿涯淑淌淮淆渊淫淳淤" + 
				"涮涵惦悴惋寂窒谍谐裆袱祷谒谓谚堕隅婉颇绰绷综绽缀琳琢揍堰揩揽揖揣搀搓壹搔葫募蒂棱椰焚椎棺榔椭棘酣酥硝硫颊雳翘凿棠晰鼎喳遏晾畴跋跛蛔蜒蛤鹃啼喧嵌赋赎赐锉锌甥掰氮氯黍筏牍逾腌腋腕猩猬惫敦痘痢痪竣翔奠遂焙" + 
				"渤渺溃溅湃愕惶寓窖窘雇谤犀隘媒媚婿缅缆缔缕骚瑟鹉瑰搪聘斟靴靶蓖蓉楔椿楷榄楞楣酪碘硼碉辐辑睹瞄嗜嗦暇畸跷跺蜈蜗蜕蛹嗅嗡嗤署蜀幌锚锥锨锭锰稚颓筷魁衙腻腮腺鹏肄猿颖煞雏馍馏禀痹廓痴誊漓溢溯溶滓溺寞窥窟寝褂" + 
				"媳嫉缚缤剿赘熬蔫摹蔓蔗蔼熙兢榛榕酵碟碴碱碳辕辖雌墅嘁踊蝉嘀幔镀舔熏箍箫舆孵瘩瘟彰粹漱漩漾慷寡寥褐褪隧嫡缨撵撩撮撬擒墩撰鞍蕊蕴樟橄敷豌醇磕磅碾憋嘶嘲嘹蝠蝎蝌蝗蝙嘿幢镊镐篓膘鲤鲫瘪瘤瘫凛澎潦澈澜憔懊憎翩" + 
				"谴鹤憨履嬉缭撼擂擅蕾薇擎翰噩橱橙瓢蟥霎辙踱蹂蟆螃螟噪鹦黔篡篷篙篱儒膳鲸瘾瘸糙燎濒憾懈窿缰壕藐檬檐檩礁磷瞬瞳瞪曙蹋蟋蟀嚎赡镣簇儡徽爵朦臊鳄癌懦豁臀藕瞻嚣鳍癞瀑襟璧戳攒孽蘑藻鳖蹭蹬簸簿蟹靡癣羹鬓攘蠕巍鳞" + 
				"譬霹躏髓蘸镶瓤矗鹂辪辬臶臵啰");
				
		CHAR_MAP.put(CharType.EN_CHARS, "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm_-");
		CHAR_MAP.put(CharType.NUMBER, "1234567890");
		CHAR_MAP.put(CharType.LAST_NAME, "赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚谢邹喻柏水窦章潘葛奚范彭郎韦昌马苗凤花方俞任袁柳酆鲍史唐费廉岑薛雷贺倪汤滕殷罗毕郝邬安常乐于时傅皮卞齐康伍余元卜顾孟平黄和穆萧尹姚邵湛汪祁毛禹狄米贝明臧计伏成戴谈宋茅庞熊纪舒屈项祝董梁杜阮蓝闵席季麻强贾路娄危江童颜郭梅盛林刁锺徐邱骆高夏蔡田樊胡凌霍虞万支柯昝管卢莫经房裘缪干解应宗丁宣贲邓郁单杭洪包诸左石崔钮龚程嵇邢滑裴陆荣翁荀羊於惠甄麴家封芮羿储靳汲邴糜松井段富巫乌焦巴弓牧隗山谷车侯宓蓬全郗班仰秋仲伊宫仇栾暴钭历戎祖武符刘景詹束龙叶幸司韶郜黎蓟溥印宿白怀蒲邰从索咸籍赖卓蔺屠池乔阳胥能苍双闻莘党翟谭贡劳逄姬申扶堵冉宰郦雍却璩桑濮牛寿通边扈燕僪浦尚农温别庄晏柴瞿阎充慕连茹习宦艾鱼容向古易慎戈廖庾终暨居衡步都耿满弘匡国文寇广禄阙东欧殳沃利蔚越夔隆师巩厍聂晁勾敖融冷訾辛阚那简饶空曾毋沙乜养鞠须丰巢关蒯相查后荆红游竺权逮盍益桓公寸贰皇侨彤竭端赫实甫集象翠狂辟典良函芒苦其中夕蹇称诺来多繁戊朴回毓税荤靖绪愈硕牢买但巧枚撒泰秘亥绍以壬森斋释奕姒朋求羽用占真穰翦闾漆代贯旁崇栋告休褒谏锐皋闳在歧禾示是委钊频嬴呼大威昂律冒保系抄定化莱校么抗祢綦悟宏功庚务敏捷拱兆丑丙畅苟随类卯俟友答乙允甲留尾佼玄乘裔延植环矫赛昔侍度旷遇偶前由咎塞敛受泷袭衅叔圣御夫仆镇藩邸府掌首员焉戏可智尔凭悉进笃厚仁业肇资合仍九衷哀刑俎仵圭夷徭蛮汗孛乾帖罕洛淦洋邶郸郯邗邛剑虢隋蒿茆菅苌树桐锁钟机盘铎斛玉线针箕庹绳磨蒉瓮弭刀疏牵浑恽势世仝同蚁止戢睢冼种涂肖己泣潜卷脱谬蹉赧浮顿说次错念夙斯完丹表聊源姓吾寻展出户闭才无书学愚本性雪霜烟寒少字桥板斐独千诗嘉扬善揭祈析赤紫柔刚奇拜佛陀弥阿素长僧隐仙隽宇祭酒淡塔琦闪始星南天接波碧速禚腾潮镜似澄潭謇纵渠奈风春濯沐茂英兰檀藤枝检生折登驹骑貊虎肥鹿雀野禽飞节宜鲜粟栗豆帛官布衣宝钞银门盈庆喜及普建营巨望希道载声漫犁力贸勤革改兴亓睦修信北守坚勇汉练尉士旅五令将旗军行奉敬恭仪母堂丘义礼慈孝理伦卿问永辉位让尧依犹介承市所苑杞剧第零谌招续达忻六鄞战迟候宛励粘萨邝覃辜初楼城区局原考妫纳泉老清德卑过麦曲竹百福言佟爱年笪谯哈墨召开光操瑞眭泥运摩伟铁迮韵貂有舜丛岳之冠宾香果况亢缑帅赏伯佴佘牟商琴海归钦鄢汝法闫楚督仉盖逯库郏逢阴薄厉稽");
//		CHAR_MAP.put(CharType.LAST_NAME, "王李张刘陈杨黄吴赵周徐孙马朱胡林郭何高罗郑梁谢宋唐许邓冯韩曹曾彭萧蔡潘田董袁于余叶蒋杜苏魏程吕丁沈任姚卢傅钟姜崔谭廖范汪陆金石戴贾韦夏邱方侯邹熊孟秦白江阎薛尹段雷黎史龙陶贺顾毛郝龚邵万钱严赖覃洪武莫孔汤向常温康施文牛樊葛邢安齐易乔伍庞颜倪庄聂章鲁岳翟殷詹申欧耿关兰焦俞左柳甘祝包宁尚符舒阮柯纪梅童凌毕单季裴霍涂成苗谷盛曲翁冉骆蓝路游辛靳欧阳管柴蒙鲍华喻祁蒲房滕屈饶解牟艾尤阳时穆农司卓古吉缪简车项连芦麦褚娄窦戚岑景党宫费卜冷晏席卫米柏宗瞿桂全佟应臧闵苟邬边卞姬师和仇栾隋商刁沙荣巫寇桑郎甄丛仲虞敖巩明佘池查麻苑迟邝官封谈匡鞠惠荆乐冀郁胥南班储原栗燕楚鄢劳谌奚皮粟冼蔺楼盘满闻位厉伊仝区郜海阚花权强帅屠豆朴盖练廉禹井祖漆巴丰支卿国狄平计索宣晋相初门云容敬来扈晁芮都普阙浦戈伏鹿薄邸雍辜羊阿乌母裘亓修邰赫杭况那宿鲜印逯隆茹诸战慕危玉银亢嵇公哈湛宾戎勾茅利於呼居揭干但尉冶斯元束檀衣信展阴昝智幸奉植衡富尧闭由冬付鄯鄂博郇淮木彦西粱凡剡镡藏颉岩郧怡雒禤偰荚敦弋武闯桃冶轩翼凯昊");
		CHAR_MAP.put(CharType.STATE_ABBR, "京津沪渝宁藏桂新蒙港澳黑吉辽皖鲁晋粤苏赣冀豫浙鄂湘闽青贵陕云琼台甘川");

		CITY_MAP.put("河北省",new String[] {"石家庄市","邯郸市","唐山市","保定市","秦皇岛市","邢台市","张家口市","承德市","沧州市","廊坊市","衡水市","辛集市","晋州市","新乐市","遵化市","迁安市","霸州市","三河市","定州市","涿州市","安国市"});
		CITY_MAP.put("山西省",new String[] {"太原市","大同市","朔州市","阳泉市","长治市","晋城市","忻州市","吕梁市","晋中市","临汾市","运城市","古交市","潞城市","高平市","原平市","孝义市","汾阳市","介休市","侯马市","霍州市"});
		CITY_MAP.put("内蒙古自治区",new String[] {"呼和浩特市","包头市","乌海市","赤峰市","呼伦贝尔市","通辽市","乌兰察布市","鄂尔多斯市","巴彦淖尔市","满洲里市","扎兰屯市","牙克石市","根河市","额尔古纳市","乌兰浩特市","阿尔山市","霍林郭勒市","锡林浩特市","二连浩特市","丰镇市"});
		CITY_MAP.put("辽宁省",new String[] {"沈阳市","大连市","朝阳市","阜新市","铁岭市","抚顺市","本溪市","辽阳市","鞍山市","丹东市","营口市","盘锦市","锦州市","葫芦岛市","新民市","瓦房店市","庄河市","北票市","凌源市","调兵山市"});
		CITY_MAP.put("吉林省",new String[] {"长春市","吉林市","白城市","松原市","四平市","辽源市","通化市","白山市","德惠市","榆树市","磐石市","蛟河市","桦甸市","舒兰市","洮南市","大安市","双辽市","公主岭市","梅河口市","集安市"});
		CITY_MAP.put("黑龙江省",new String[] {"哈尔滨市","齐齐哈尔市","黑河市","大庆市","伊春市","鹤岗市","佳木斯市","双鸭山市","七台河市","鸡西市","牡丹江市","绥化市","尚志市","五常市","讷河市","北安市","五大连池市","铁力市","同江市","富锦市"});
		CITY_MAP.put("江苏省",new String[] {"南京市","徐州市","连云港市","宿迁市","淮安市","盐城市","扬州市","泰州市","南通市","镇江市","常州市","无锡市","苏州市","常熟市","张家港市","太仓市","昆山市","江阴市","宜兴市","溧阳市"});
		CITY_MAP.put("浙江省",new String[] {"杭州市","宁波市","湖州市","嘉兴市","舟山市","绍兴市","衢州市","金华市","台州市","温州市","丽水市","临安市","建德市","慈溪市","余姚市","平湖市","海宁市","桐乡市","诸暨市","嵊州市"});
		CITY_MAP.put("福建省",new String[] {"厦门市","福州市","南平市","三明市","莆田市","泉州市","漳州市","龙岩市","宁德市","福清市","长乐市","邵武市","武夷山市","建瓯市","永安市","石狮市","晋江市","南安市","龙海市","漳平市"});
		CITY_MAP.put("江西省",new String[] {"南昌市","九江市","景德镇市","鹰潭市","新余市","萍乡市","赣州市","上饶市","抚州市","宜春市","吉安市","瑞昌市","共青城市","乐平市","瑞金市","德兴市","丰城市","樟树市","高安市","井冈山市"});
		CITY_MAP.put("山东省",new String[] {"济南市","青岛市","聊城市","德州市","东营市","淄博市","潍坊市","烟台市","威海市","日照市","临沂市","枣庄市","济宁市","泰安市","莱芜市","滨州市","菏泽市","胶州市","即墨市","平度市"});
		CITY_MAP.put("河南省",new String[] {"郑州市","开封市","洛阳市","平顶山市","安阳市","鹤壁市","新乡市","焦作市","濮阳市","许昌市","漯河市","三门峡市","南阳市","商丘市","周口市","驻马店市","信阳市","荥阳市","新郑市"});
		CITY_MAP.put("湖北省",new String[] {"武汉市","十堰市","襄阳市","荆门市","孝感市","黄冈市","鄂州市","黄石市","咸宁市","荆州市","宜昌市","随州市","丹江口市","老河口市","枣阳市","宜城市","钟祥市","汉川市","应城市","安陆市"});
		CITY_MAP.put("湖南省",new String[] {"长沙市","衡阳市","张家界市","常德市","益阳市","岳阳市","株洲市","湘潭市","郴州市","永州市","邵阳市","怀化市","娄底市","耒阳市","常宁市","浏阳市","津市市","沅江市","汨罗市","临湘市"});
		CITY_MAP.put("广东省",new String[] {"广州市","清远市","韶关市","河源市","梅州市","潮州市","汕头市","揭阳市","汕尾市","惠州市","东莞市","珠海市","中山市","江门市","佛山市","肇庆市","云浮市","阳江市","茂名市","湛江市"});
		CITY_MAP.put("广西壮族自治区",new String[] {"南宁市","桂林市","柳州市","梧州市","贵港市","玉林市","钦州市","北海市","防城港市","崇左市","百色市","河池市","来宾市","贺州市","岑溪市","桂平市","北流市","东兴市","凭祥市","宜州市"});
		CITY_MAP.put("海南省",new String[] {"海口市","三亚市","三沙市","儋州市","文昌市","琼海市","万宁市","东方市","五指山市"});
		CITY_MAP.put("四川省",new String[] {"成都市","广元市","绵阳市","德阳市","南充市","广安市","遂宁市","内江市","乐山市","自贡市","泸州市","宜宾市","攀枝花市","巴中市","达州市","资阳市","眉山市","雅安市","崇州市","邛崃市"});
		CITY_MAP.put("贵州省",new String[] {"贵阳市","六盘水市","遵义市","安顺市","毕节市","铜仁市","清镇市","赤水市","仁怀市","凯里市","都匀市","兴义市","福泉市"});
		CITY_MAP.put("云南省",new String[] {"昆明市","曲靖市","玉溪市","丽江市","昭通市","普洱市","临沧市","保山市","安宁市","宣威市","芒市","瑞丽市","大理市","楚雄市","个旧市","开远市","蒙自市","弥勒市","景洪市","文山市"});
		CITY_MAP.put("陕西省",new String[] {"西安市","延安市","铜川市","渭南市","咸阳市","宝鸡市","汉中市","榆林市","商洛市","安康市","韩城","华阴","兴平"});
		CITY_MAP.put("甘肃省",new String[] {"兰州市","嘉峪关市","金昌市","白银市","天水市","酒泉市","张掖市","武威市","庆阳市","平凉市","定西市","陇南市","玉门市","敦煌市","临夏市","合作市"});
		CITY_MAP.put("青海省",new String[] {"西宁市","海东市","格尔木市","德令哈市","玉树市"});
		CITY_MAP.put("西藏自治区",new String[] {"拉萨市","日喀则市","昌都市","林芝市","山南市"});
		CITY_MAP.put("安徽省",new String[] {"安庆市","蚌埠市","亳州市","巢湖市","池州市","滁州市","阜阳市","合肥市","淮北市","淮南市","黄山市","六安市","马鞍山市","宿州市","铜陵市","芜湖市","宣城市","桐城市","天长市","明光市"});
		CITY_MAP.put("宁夏回族自治区",new String[] {"银川市","石嘴山市","吴忠市","中卫市","固原市","灵武市","青铜峡市"});
		CITY_MAP.put("台湾省",new String[] {"台北市","新北市","桃园市","台中市","台南市","高雄市","基隆市","新竹市","嘉义市"});
		CITY_MAP.put("新疆维吾尔自治区",new String[] {"乌鲁木齐市","克拉玛依市","吐鲁番市","哈密市","喀什市","阿克苏市","和田市","阿图什市","阿拉山口市","博乐市","昌吉市","阜康市","库尔勒市","伊宁市","奎屯市","塔城市","乌苏市","阿勒泰市","霍尔果斯市","石河子市"});
		CITY_MAP.put("北京市",new String[] {"朝阳区","西城区","东城区","海淀区","丰台区","石景山区","门头沟区","房山区","通州区","顺义区","昌平区","大兴区","平谷区","怀柔区","延庆县","密云县"});
		CITY_MAP.put("天津市",new String[] {"和平区","河西区","河北区","河东区","南开区","红桥区","北辰区","西青区","大港区","塘沽区","汉沽区","宝坻区","蓟县","东丽区","武清区","静海县","宁河县","静海县"});
		CITY_MAP.put("上海市",new String[] {"黄浦区","徐汇区","长宁区","静安区","普陀区","虹口区","杨浦区","闵行区","宝山区","嘉定区","浦东新区","金山区","松江区","青浦区","奉贤区","崇明区"});
		CITY_MAP.put("重庆市",new String[] {"万州区","涪陵区","渝中区","大渡口区","江北区","沙坪坝区","九龙坡区","南岸区","北碚区","万盛区","双桥区","渝北区","巴南区","黔江区","长寿区","江津区","合川区","永川区","南川区","綦江县"});
		CITY_MAP.put("香港特别行政区",new String[] {"中西区","东区","南区","湾仔区","九龙区","观塘区","深水埗区","黄大仙区","油尖旺区","离岛区","葵青区","北区","西贡区","沙田区","大埔区","荃湾区","屯门区","元朗区"});
		CITY_MAP.put("澳门特别行政区",new String[] {"花地玛堂区","圣安多尼堂区","大堂区","望德堂区","风顺堂区", "嘉模堂区","圣方济各堂区"});
	}


	public static String COMPANY_SUFFIX[]={"有限公司","股份有限公司","集团有限公司","技术有限公司"};

	public static String EMAIL_SUFFIX[]={"@qq.com","@163.com","@126.com","@163.net","@126.net","@tom.com","@sina.com","@yahoo.com","@hotmail.com","@21cn.com","@gmail.com","@sohu.com","@263.com","@eyou.com"};

	public static String[] TWO_LAST_NAME= {
			"第五" ,"万俟" ,"司马" ,"上官" ,"欧阳" ,"夏侯" ,"诸葛" ,"闻人" ,"东方" ,"赫连" ,"皇甫" ,"尉迟" ,"公羊",
			"澹台"  ,"公冶"  ,"宗政" ,"濮阳" ,"淳于" ,"单于" ,"太叔" ,"申屠" ,"公孙" ,"仲孙" ,"轩辕" ,"令狐" ,"公良",
			"钟离"  ,"宇文"  ,"长孙" ,"慕容" ,"司徒" ,"司空" ,"章佳" ,"那拉" ,"纳喇" ,"乌雅" ,"范姜" ,"碧鲁" ,"张廖",
			"张简"  ,"图门" ,"太史" ,"公叔" ,"乌孙" ,"完颜" ,"马佳" ,"佟佳" ,"微生" ,"羊舌" ,"呼延" ,"南门" ,"东郭",
			"富察"  ,"费莫" ,"南宫" ,"西门" ,"东门" ,"左丘" ,"梁丘" ,"闾丘" ,"百里" ,"谷梁" ,"宰父" ,"夹谷" ,"拓跋",
			"壤驷"  ,"乐正" ,"漆雕" ,"公西" ,"巫马" ,"端木" ,"颛孙" ,"子车" ,"司寇" ,"亓官" ,"鲜于" ,"锺离" ,"段干"
	};

	//省市英文拼音集合
	public static String[] PRI_CITY_ENG={"Beijing","Tianjin","Hebei","Shijiazhuang","Tangshan","Qinhuangdao","Handan","Xingtai","Baoding","Zhangjiakou","Chengde","Cangzhou","Langfang","Hengshui","Shanxi","Taiyuan","Datong","Yangquan","Changzhi","Jincheng","Shuozhou","Jinzhong","Yuncheng","Xinzhou","Linfen","Lvliang","Inner Mongolia","Hohhot","Baotou","Wuhai","Chifeng","Tongliao","Ordos","Hulunber","Bayan Nur","Ulanqab","Hinggan","Xilin Gol","Alxa","Liaoning","Shenyang","Dalian","Anshan","Fushun","Benxi","Dandong","Jinzhou","Yingkou","Fuxin","Liaoyang","Panjin","Tieling","Chaoyang","Huludao","Jinpuxinqu","Jilin","Changchun","Jilin","Siping","Liaoyuan","Tonghua","Baishan","Songyuan","Baicheng","Yanbian","Heilongjiang","Harbin","Qiqihar","Jixi","Hegang","Shuangyashan","Daqing","Yichun","Jiamusi","Qitaihe","Mudanjiang","Heihe","Suihua","DaXingAnLing","Shanghai","Shanghai","Jiangsu","Nanjing","Wuxi","Xuzhou","Changzhou","Suzhou","Nantong","Lianyungang","Huai'an","Yancheng","Yangzhou","Zhenjiang","Taizhou","Suqian","Zhejiang","Hangzhou","Ningbo","Wenzhou","Jiaxing","Huzhou","Shaoxing","Jinhua","Quzhou","Zhoushan","Taizhou","Lishui","Zhoushan","Anhui","Hefei","Wuhu","Bengbu","Huainan","Ma'anshan","Huaibei","Tongling","Anqing","Huangshan","Chuzhou","Fuyang","Suzhou","Lu'an","Bozhou","Chizhou","Xuancheng","Fujian","Fuzhou","Xiamen","Putian","Sanming","Quanzhou","Zhangzhou","Nanping","Longyan","Ningde","Jiangxi","Nanchang","Jingdezhen","Pingxiang","Jiujiang","Xinyu","Yingtan","Ganzhou","Ji'an","Yichun","Fuzhou","Shangrao","Shandong","Jinan","Qingdao","Zibo","Zaozhuang","Dongying","Yantai","Weifang","Jining","Tai'an","Weihai","Rizhao","Laiwu","Linyi","Dezhou","Liaocheng","Binzhou","Heze","Henan","Zhengzhou","Kaifeng","Luoyang","Pingdingshan","Anyang","Hebi","Xinxiang","Jiaozuo","Puyang","Xuchang","Luohe","Sanmenxia","Nanyang","Shangqiu","Xinyang","Zhoukou","Zhumadian","","Hubei","Wuhan","Huangshi","Shiyan","Yichang","Xiangyang","Ezhou","Jingmen","Xiaogan","Jingzhou","Huanggang","Xianning","Suizhou","Enshi","","Hunan","Changsha","Zhuzhou","Xiangtan","Hengyang","Shaoyang","Yueyang","Changde","Zhangjiajie","Yiyang","Chenzhou","Yongzhou","Huaihua","Loudi","Xiangxi","Guangdong","Guangzhou","Shaoguan","Shenzhen","Zhuhai","Shantou","Foshan","Jiangmen","Zhanjiang","Maoming","Zhaoqing","Huizhou","Meizhou","Shanwei","Heyuan","Yangjiang","Qingyuan","Dongguan","Zhongshan","Chaozhou","Jieyang","Yunfu","Guangxi","Nanning","Liuzhou","Guilin","Wuzhou","Beihai","Fangchenggang","Qinzhou","Guigang","Yulin","Baise","Hezhou","Hechi","Laibin","Chongzuo","Hainan","Haikou","Sanya","Sansha","","Chongqing","Chongqing","Liangjiangxinqu","Sichuan","Chengdu","Zigong","Panzhihua","Luzhou","Deyang","Mianyang","Guangyuan","Suining","Neijiang","Leshan","Nanchong","Meishan","Yibin","Guang'an","Dazhou","Ya'an","Bazhong","Ziyang","Aba","Garze","Liangshan","Guizhou","Guiyang","Liupanshui","Zunyi","Anshun","Bijie","Tongren","Qianxinan","Qiandongnan","Qiannan","Yunnan","Kunming","Qujing","Yuxi","Baoshan","Zhaotong","Lijiang","Pu'er","Lincang","Chuxiong","Honghe","Wenshan","Xishuangbanna","Dali","Dehong","Nujiang","Deqen","Tibet","Lhasa","Rikaze","Qamdo","Shannan","Nagqu","Ngari","Nyingchi","Shaanxi","Xi'an","Tongchuan","Baoji","Xianyang","Weinan","Yan'an","Hanzhong","Yulin","Ankang","Shangluo","Xixian","Gansu","Lanzhou","Jiayuguan","Jinchang","Baiyin","Tianshui","Wuwei","Zhangye","Pingliang","Jiuquan","Qingyang","Dingxi","Longnan","Linxia","Gannan","Qinghai","Xining","Haidong","Haibei","Huangnan","Hainan","Golog","Yushu","Haixi","Ningxia","Yinchuan","Shizuishan","Wuzhong","Guyuan","Zhongwei","Xinjiang","Urumqi","Karamay","Turpan","Hami","Changji","Bortala","Bayingol","Aksu","Kizilsu","Kashgar","Hotan","Ili","Qoqek","Altay","","Taiwan","Taipei","Kaohsiung","Keelung","Taichung","Tainan","Hsinchu","Chiayi","New Taipei","Yilan","Taoyuan","Hsinchu","Miaoli","Changhua","Nantou","Yunlin","Chiayi","Pingtung","Taitung","Hualien","Penghu","Jinmen","Lienchiang","Hong Kong","Hong Kong Island","Kowloon","New Territories","Macau","MacauPeninsula","Taipa","Coloane","DiaoyuDao"};
    //公司常用后缀
	public static String[] COMPANY_PREFIEXX_ENG= new String[]{"Company Limited","Co.Ltd","Co.Ltd.","Group Limited","Co.,Ltd","Group Company"};
    //英文行业关键词
	public static String[] PROFESSION_ENG= new String[]{"Sysetm","Technology","Information","Finance ","Medicine","Seed","Telectronic Commerce","Engineering Management","Building","Economic","Internet","Real Estate","Media","Game","Education","Tourist","Computer","Hardware","Software","Information Assurance","Data Service","Adviertisement"};


	public static String[] MOBIL_PREFIX = { "134", "135", "136", "137", "138", "139", "150", "151", "152", "157",
			"158", "159", "182", "183", "184", "187", "188", "130", "131", "132", "155", "156", "185", "186", "133",
			"153", "180", "189" };

	public static String[] TEL_AREA = {"0086","086", "86", "010", "021", "022", "023", "0898", "0311", "0312", "0313", "0314",
			"0315", "0316", "0317", "0318", "0319", "0310", "0335", "0349", "0351", "0352", "0353", "0354", "0355",
			"0356", "0357", "0358", "0359", "0350", "0371", "0372", "0373", "0374", "0375", "0376", "0377", "0379",
			"0370", "0391", "0392", "0393", "0394", "0395", "0396", "0398", "024", "0411", "0412", "0415", "0416",
			"0417", "0418", "0419", "0421", "0427", "0429", "0431", "0432", "0433", "0434", "0435", "0436", "0437",
			"0438", "0439", "0451", "0452", "0453", "0454", "0455", "0456", "0457", "0458", "0459", "0464", "0467",
			"0468", "0469", "0471", "0472", "0473", "0474", "0475", "0476", "0477", "0478", "0479", "0470", "0482",
			"0483", "025", "0511", "0512", "0513", "0514", "0515", "0516", "0517", "0518", "0519", "0510", "0523",
			"0527", "0531", "0532", "0533", "0534", "0535", "0536", "0537", "0538", "0539", "0530", "0543", "0546",
			"0631", "0632", "0633", "0634", "0635", "0660", "0662", "0663", "0668", "0691", "0692", "0551", "0552",
			"0553", "0554", "0555", "0556", "0557", "0558", "0559", "0550", "0561", "0562", "0563", "0564", "0566",
			"0571", "0572", "0573", "0574", "0575", "0576", "0577", "0578", "0579", "0570", "0580", "0591", "0592",
			"0593", "0594", "0595", "0596", "0597", "0598", "0599", "027", "0711", "0712", "0713", "0714", "0715",
			"0716", "0717", "0718", "0719", "0710", "0722", "0724", "0728", "0731", "0734", "0735", "0736", "0737",
			"0738", "0739", "0730", "0743", "0744", "0745", "0746", "020", "0750", "0751", "0752", "0753", "0754",
			"0755", "0756", "0757", "0758", "0759", "0760", "0762", "0763", "0766", "0768", "0769", "0771", "0772",
			"0773", "0774", "0775", "0776", "0777", "0778", "0779", "0770", "0791", "0792", "0793", "0794", "0795",
			"0796", "0797", "0798", "0799", "0790", "0701", "028", "0812", "0813", "0816", "0817", "0818", "0825",
			"0826", "0827", "0831", "0832", "0833", "0834", "0835", "0836", "0837", "0838", "0839", "0830", "0851",
			"0854", "0855", "0856", "0857", "0858", "0859", "0871", "0872", "0873", "0874", "0875", "0876", "0877",
			"0878", "0879", "0870", "0883", "0886", "0887", "0888", "0891", "0892", "0893", "0894", "0895", "0896",
			"0897", "029", "0911", "0912", "0913", "0914", "0915", "0916", "0917", "0919", "0931", "0932", "0933",
			"0934", "0935", "0936", "0937", "0938", "0939", "0930", "0941", "0943", "0951", "0952", "0953", "0954",
			"0955", "0971", "0972", "0973", "0974", "0975", "0976", "0977", "0979", "0970", "0991", "0992", "0993",
			"0994", "0995", "0996", "0997", "0998", "0999", "0990", "0901", "0902", "0903", "0906", "0908", "0909" };

    public static String[] provCityCodeArr= new String[]{};//实际存在的省市代码数组
    public static String[] errorProvCityCodeArr = new String[]{};//生成所有6位数省市代码,排除provCityCodeArr数组
	static {
		AREA_CODE_MAP.put("110",new String[] {"000","100","101","102","103","104","105","106","107","108","109","111","112","113","114","115","116","117","200","228","229"});
		AREA_CODE_MAP.put("120",new String[] {"000","100","101","102","103","104","105","106","110","111","112","113","114","115","200","221","223","225"});
		AREA_CODE_MAP.put("130",new String[] {"000","100","101","102","103","104","105","107","108","121","123","124","125","126","127","128","129","130","131","132","133","181","182","183","184","185","200","201","202","203","204","205","207","208","223","224","225","227","229","230","281","283","300","301","302","303","304","321","322","323","324","400","401","402","403","404","406","421","423","424","425","426","427","428","429","430","431","432","433","434","435","481","500","501","502","503","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","581","582","600","601","602","603","604","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","681","682","683","684","700","701","702","703","705","706","721","722","723","724","725","726","727","728","729","730","731","732","733","800","801","802","803","804","821","822","823","824","825","826","827","828","900","901","902","903","921","922","923","924","925","926","927","928","929","930","981","982","983","984"});
		AREA_CODE_MAP.put("131",new String[] {"000","001","002","003","022","023","024","025","026","028","081","082","100","101","102","121","122","123","124","125","126","127","128","181","182"});
		AREA_CODE_MAP.put("140",new String[] {"000","100","101","105","106","107","108","109","110","121","122","123","181","200","201","202","203","211","212","221","222","223","224","225","226","227","300","301","302","303","311","321","322","400","401","402","411","421","423","424","425","426","427","428","429","430","431","481","500","501","502","521","522","524","525","581","600","601","602","603","621","622","623","624","700","701","702","721","722","723","724","725","726","727","728","729","781","800","801","802","821","822","823","824","825","826","827","828","829","830","881","882","900","901","902","921","922","923","924","925","926","927","928","929","930","931","932","981"});
		AREA_CODE_MAP.put("141",new String[] {"000","001","002","021","022","023","024","025","026","027","028","029","030","031","032","033","034","081","082","100","101","102","121","122","123","124","125","126","127","128","129","130","181","182"});
		AREA_CODE_MAP.put("150",new String[] {"000","100","101","102","103","104","105","121","122","123","124","125","200","201","202","203","204","205","206","207","221","222","223","300","301","302","303","304","400","401","402","403","404","421","422","423","424","425","426","428","429","430","500","501","502","521","522","523","524","525","526","581","600","601","602","621","622","623","624","625","626","627","700","701","702","721","722","723","724","725","726","727","781","782","783","784","785","800","801","802","821","822","823","824","825","826","900","901","902","921","922","923","924","925","926","927","928","929","981"});
		AREA_CODE_MAP.put("152",new String[] {"200","201","202","221","222","223","224","500","501","502","522","523","524","525","526","527","528","529","530","531","900","921","922","923"});
		AREA_CODE_MAP.put("210",new String[] {"000","100","101","102","103","104","105","106","111","112","113","114","122","123","124","181","200","201","202","203","204","211","212","213","224","281","282","283","300","301","302","303","304","311","321","323","381","400","401","402","403","404","411","421","422","423","500","501","502","503","504","505","521","522","600","601","602","603","604","624","681","682","700","701","702","703","711","726","727","781","782","800","801","802","803","804","811","881","882","900","901","902","903","904","905","911","921","922"});
		AREA_CODE_MAP.put("211",new String[] {"000","001","002","003","004","005","011","021","081","100","101","102","103","121","122","200","201","202","204","221","223","224","281","282","300","301","302","303","321","322","324","381","382","400","401","402","403","404","421","422","481"});
		AREA_CODE_MAP.put("220",new String[] {"000","100","101","102","103","104","105","106","112","122","181","182","183","200","201","202","203","204","211","221","281","282","283","284","300","301","302","303","322","323","381","382","400","401","402","403","421","422","500","501","502","503","521","523","524","581","582","600","601","602","605","621","622","623","681","700","701","702","721","722","723","724","800","801","802","821","822","881","882"});
		AREA_CODE_MAP.put("222",new String[] {"400","401","402","403","404","405","406","424","426"});
		AREA_CODE_MAP.put("230",new String[] {"000","100","101","102","103","104","108","109","110","111","123","124","125","126","127","128","129","182","183","184","200","201","202","203","204","205","206","207","208","221","223","224","225","227","229","230","231","281","300","301","302","303","304","305","306","307","321","381","382","400","401","402","403","404","405","406","407","421","422","500","501","502","503","505","506","521","522","523","524","600","601","602","603","604","605","606","621","622","623","624","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","722","781","800","801","803","804","805","811","822","826","828","833","881","882","900","901","902","903","904","921"});
		AREA_CODE_MAP.put("231",new String[] {"000","001","002","003","004","005","024","025","081","083","084","085","100","101","102","121","123","124","181","182","200","201","202","221","222","223","224","225","226","281","282","283"});
		AREA_CODE_MAP.put("232",new String[] {"700","721","722","723"});
		AREA_CODE_MAP.put("310",new String[] {"000","100","101","103","104","105","106","107","108","109","110","112","113","114","115","116","117","118","120","200","230"});
		AREA_CODE_MAP.put("320",new String[] {});
		AREA_CODE_MAP.put("321",new String[] {"000","001","002","003","011","023","081","084","088","100","101","102","111","112","181","182","183","200","201","202","203","281","282","283","284","300","301","302","311","322","323","324"});
		AREA_CODE_MAP.put("330",new String[] {"000","100","101","102","103","104","105","106","108","109","110","122","127","182","183","185","200","201","203","204","205","206","211","212","225","226","281","282","283","300","301","302","303","304","322","324","326","327","328","329","381","382","400","401","402","411","421","424","481","482","483","500","501","502","503","521","522","523","600","601","602","621","624","681","682","683","700","701","702","703","723","726","727","781","782","783","784","800","801","802","803","822","824","825","881","900","901","902","903","921","922"});
		AREA_CODE_MAP.put("331",new String[] {"000","001","002","003","004","021","022","023","024","081","082","100","101","102","121","122","123","124","125","126","127","181"});
		AREA_CODE_MAP.put("340",new String[] {"000","100","101","102","103","104","111","121","122","123","200","201","202","203","207","208","221","222","223","300","301","302","303","304","311","321","322","323","400","401","402","403","404","405","406","421","500","501","502","503","504","521","600","601","602","603","604","621","700","701","702","703","711","721","800","801","802","803","811","822","823","824","825","826","827","828","881"});
		AREA_CODE_MAP.put("341",new String[] {"000","001","002","003","004","021","022","023","024","100","101","102","103","122","124","125","126","181","182","200","201","202","203","204","221","222","225","226","282","300","301","302","321","322","323","324","400","401","402","421","422","423","424","500","501","502","503","521","522","523","524","525","600","601","602","621","622","623","700","701","702","721","722","723","800","801","802","821","822","823","824","825","881"});
		AREA_CODE_MAP.put("350",new String[] {"000","100","101","102","103","104","105","111","121","122","123","124","125","128","181","182","200","201","203","205","206","211","212","213","300","301","302","303","304","305","322","400","401","402","403","421","423","424","425","426","427","428","429","430","481","500","501","502","503","504","505","521","524","525","526","527","581","582","583","600","601","602","603","622","623","624","625","626","627","628","629","681","700","701","702","721","722","723","724","725","781","782","783","784","800","801","802","821","822","823","824","825","881","900","901","902","921","922","923","924","925","926","981","982"});
		AREA_CODE_MAP.put("360",new String[] {"000","100","101","102","103","104","105","111","121","122","123","124","200","201","202","203","222","281","300","301","302","313","321","322","323","400","401","402","403","421","423","424","425","426","427","428","429","430","481","500","501","502","521","600","601","602","622","681","700","701","702","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","781","782","800","801","802","803","821","822","823","824","825","826","827","828","829","830","881","900","901","902","921","922","923","924","925","926","981","982","983"});
		AREA_CODE_MAP.put("361",new String[] {"000","001","002","021","022","023","024","025","026","027","028","029","030","100","101","102","121","122","123","124","125","126","127","128","129","130","181"});
		AREA_CODE_MAP.put("370",new String[] {});
		AREA_CODE_MAP.put("371",new String[] {"000","001","002","081","082","083","100","101","102","103","121","122","200","201","202","203","300","301","302","311","312","321","322","323","324","325","326","327","328","329","400","401","402","421","422","423","424","425","426","427","428","481","482","500","501","502","521","522","523","524","525","526","581","600","601","602","621","622","623","624","625","626","700","701","702","721","722","723","724","725","726","727","728"});
		AREA_CODE_MAP.put("410",new String[] {"000","100","101","102","103","104","105","106","108","122","181","182","183","184","185","200","201","202","203","204","205","211","221","222","223","224","225","300","301","302","303","304","305","306","311","322","323","324","325","326","327","328","329","381","400","401","402","403","404","411","421","422","423","425","481","482","500","501","502","503","505","506","522","523","526","527","581","600","601","602","603","611","621","622","700","701","702","703","704","711","721","724","725","726","727","728","781","782","800","801","802","803","804","811","821","822","823","825","882","883","900","901","902","922","923","926","927","928"});
		AREA_CODE_MAP.put("411",new String[] {"000","001","002","023","024","025","081","082","100","101","102","103","104","121","122","200","201","202","221","222","224","281","282","300","301","302","303","321","322","323","324","325","326","327","328","329","330","381","400","401","402","403","421","422","423","424","425","426","481","500","501","502","503","521","522","523","524","525","526","527","528","600","601","602","621","622","623","624","625","626","627","628","681","700","701","702","721","722","723","724","725","726","727","728","729"});
		AREA_CODE_MAP.put("419",new String[] {"001"});
		AREA_CODE_MAP.put("420",new String[] {"000","100","101","102","103","104","105","106","107","111","112","113","114","115","116","117","200","201","202","203","204","205","222","281","300","301","302","303","321","322","323","324","325","381","500","501","502","503","504","505","506","525","526","527","528","529","581","582","583","600","601","602","606","607","624","625","626","682","683","684","700","701","702","703","704","800","801","802","804","821","822","881","900","901","902","921","922","923","981","982","984"});
		AREA_CODE_MAP.put("421",new String[] {"000","001","002","003","022","023","024","081","083","087","100","101","102","121","122","123","124","125","126","127","181","182","200","201","202","221","222","223","224","281","300","301","303","381"});
		AREA_CODE_MAP.put("422",new String[] {"800","801","802","822","823","825","826","827","828"});
		AREA_CODE_MAP.put("429",new String[] {"000","004","005","006","021"});
		AREA_CODE_MAP.put("430",new String[] {"000","100","101","102","103","104","105","111","121","122","124","181","200","201","202","203","204","211","221","223","224","225","281","300","301","302","304","321","381","382","400","401","405","406","407","408","412","421","422","423","424","426","481","482","500","501","502","503","511","521","522","523","524","525","527","528","529","581","600","601","602","603","611","621","623","624","626","681","682","700","701","702","703","721","722","723","724","725","726","781","800","801","802","811","821","822","900","901","902","903","921","922","923","981"});
		AREA_CODE_MAP.put("431",new String[] {"000","001","002","003","021","022","023","024","025","026","027","028","081","100","101","102","103","121","122","123","124","125","126","127","128","129","200","201","202","221","222","223","224","225","226","227","228","229","230","281","300","301","302","321","322","381","382"});
		AREA_CODE_MAP.put("433",new String[] {"100","101","122","123","124","125","126","127","130"});
		AREA_CODE_MAP.put("440",new String[] {"000","100","101","102","103","104","105","106","111","112","113","114","115","116","183","184","200","201","203","204","205","222","224","229","232","233","281","282","300","301","303","304","305","306","307","308","400","401","402","403","404","500","501","507","511","512","513","514","515","523","600","601","604","605","606","607","608","700","701","703","704","705","781","783","784","785","800","801","802","803","804","811","823","825","881","882","883","900","901","902","903","923","981","982","983"});
		AREA_CODE_MAP.put("441",new String[] {"200","201","202","203","223","224","225","226","283","284","300","301","302","303","322","323","324","400","401","402","421","422","423","424","426","427","481","500","501","502","521","523","581","600","601","602","621","622","623","624","625","700","701","702","721","723","781","800","801","802","821","823","825","826","827","881","882","900"});
		AREA_CODE_MAP.put("442",new String[] {"000"});
		AREA_CODE_MAP.put("445",new String[] {"100","101","102","121","122","200","201","202","221","222","224","281","300","301","302","321","322","323","381"});
		AREA_CODE_MAP.put("450",new String[] {"000","100","101","102","103","105","107","108","109","122","123","124","125","126","127","200","201","202","203","204","205","221","222","223","224","225","226","300","301","302","303","304","305","311","321","322","323","324","325","326","327","328","329","330","331","332","400","401","403","404","405","421","422","423","481","500","501","502","503","512","521","600","601","602","603","621","681","700","701","702","703","721","722","800","801","802","803","804","821","881","900","901","902","921","922","923","924","981"});
		AREA_CODE_MAP.put("451",new String[] {"000","001","002","021","022","023","024","025","026","027","028","029","030","031","100","101","102","121","122","123","200","201","202","221","222","223","224","225","226","227","228","229","281","300","301","302","321","322","323","324","381","400","401","402","421","422","423","424","425","481"});
		AREA_CODE_MAP.put("460",new String[] {"000","100","101","105","106","107","108","200","201"});
		AREA_CODE_MAP.put("469",new String[] {"000","001","002","003","005","006","007","021","022","023","024","025","026","027","028","029","030","031","032","033"});
		AREA_CODE_MAP.put("500",new String[] {"000","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","200","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","240","241","242","243"});
		AREA_CODE_MAP.put("510",new String[] {"000","100","101","104","105","106","107","108","112","113","114","115","121","122","124","129","131","132","181","182","183","184","300","301","302","303","304","311","321","322","400","401","402","403","411","421","422","500","501","502","503","504","521","522","524","525","600","601","603","623","626","681","682","683","700","701","703","704","722","723","724","725","726","727","781","800","801","802","811","812","821","822","823","824","900","901","903","904","921","922","923"});
		AREA_CODE_MAP.put("511",new String[] {"000","001","002","011","024","025","028","100","101","102","111","112","113","123","124","126","129","132","133","181","300","301","302","303","304","321","322","323","324","325","381","400","401","402","421","422","423","424","425","500","501","502","521","522","523","524","525","526","527","528","529","600","601","602","621","622","623","681","700","701","702","721","722","723","724","725","781","800","801","802","821","822","823","824","825","826","827","900","901","902","921","922","923"});
		AREA_CODE_MAP.put("512",new String[] {"000","001","002","021","022","081"});
		AREA_CODE_MAP.put("513",new String[] {"200","221","222","223","224","225","226","227","228","229","230","231","232","233","300","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","400","401","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437"});
		AREA_CODE_MAP.put("520",new String[] {"000","100","101","102","103","111","112","113","114","121","122","123","181","200","201","203","221","222","300","301","302","303","321","322","323","324","325","326","327","328","329","330","381","382","400","401","402","421","422","423","424","425"});
		AREA_CODE_MAP.put("522",new String[] {"200","201","222","223","224","225","226","227","228","229","230","300","301","322","323","324","325","326","327","328","400","401","422","423","424","425","426","427","428","600","601","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","700","701","702","722","723","725","726","727","728","729","730","731","732"});
		AREA_CODE_MAP.put("530",new String[] {"000","100","101","102","103","111","112","113","121","122","124","125","126","127","128","129","181","300","301","302","321","322","323","324","325","326","328","381","400","401","402","421","422","423","424","425","426","427","428","500","501","502","521","522","523","524","600","601","602","621","622","623","624","625","626","627","628","629","630","700","701","702","721","722","723","724","800","801","802","821","822","823","824","825","826","827","828","829","900","901","902","921","922","923","924","925","926","927"});
		AREA_CODE_MAP.put("532",new String[] {"300","301","322","323","324","325","326","327","328","329","331","500","501","502","522","523","524","525","526","527","528","529","530","531","532","600","621","622","623","624","625","626","627","628","800","801","822","823","900","901","922","923","924","925","926","927","928","929","930","931","932"});
		AREA_CODE_MAP.put("533",new String[] {"100","102","103","122","123","124","300","321","323","324","325","400","421","422","423"});
		AREA_CODE_MAP.put("540",new String[] {"000","100","101","102","121","122","123","124","125","126","127"});
		AREA_CODE_MAP.put("542",new String[] {"100","121","122","123","124","125","126","127","128","129","132","133","200","221","222","223","224","225","226","227","228","229","231","232","233","300","301","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","400","421","422","423","424","425","426","427","428","429","430","500","521","522","523","524","525","526","527","600","621","622","623","624","625","626","627"});
		AREA_CODE_MAP.put("610",new String[] {"000","100","101","102","103","104","111","112","113","114","115","116","122","124","125","126","200","201","202","203","204","222","300","301","302","303","304","322","323","324","326","327","328","329","330","331","400","401","402","403","404","422","423","424","425","426","427","428","429","430","431","481","500","501","502","521","522","523","524","525","526","527","528","581","582","600","601","602","621","622","623","624","625","626","627","628","629","630","631","632","700","701","702","721","722","723","724","725","726","727","728","729","730","800","801","802","821","822","823","824","825","826","827","828","829","830","831","900","901","902","921","922","923","924","925","926","927","928","929"});
		AREA_CODE_MAP.put("611",new String[] {"000","001","002","021","022","023","024","025","026"});
		AREA_CODE_MAP.put("620",new String[] {"000","100","101","102","103","104","105","111","121","122","123","200","201","300","301","302","321","400","401","402","403","421","422","423","500","501","502","503","521","522","523","524","525","600","601","602","621","622","623","700","701","702","721","722","723","724","725","800","801","802","821","822","823","824","825","826","900","901","902","921","922","923","924","981","982"});
		AREA_CODE_MAP.put("621",new String[] {"000","001","002","021","022","023","024","025","026","027","100","101","102","121","122","123","124","125","126","200","201","202","221","222","223","224","225","226","227","228"});
		AREA_CODE_MAP.put("622",new String[] {"900","901","921","922","923","924","925","926","927"});
		AREA_CODE_MAP.put("623",new String[] {"000","001","021","022","023","024","025","026","027"});
		AREA_CODE_MAP.put("630",new String[] {"000","100","101","102","103","104","105","121","122","123"});
		AREA_CODE_MAP.put("632",new String[] {"100","121","122","123","126","127","128","200","221","222","223","224","300","321","322","323","324","500","521","522","523","524","525","600","621","622","623","624","625","626","700","721","722","723","724","725","726","800","801","802","821","822","823"});
		AREA_CODE_MAP.put("640",new String[] {"000","100","101","104","105","106","121","122","181","200","201","202","205","221","300","301","302","303","323","324","381","400","401","402","422","423","424","425","500","501","502","521","522"});
		AREA_CODE_MAP.put("650",new String[] {"000","100","101","102","103","104","105","106","107","109","121","200","201","202","203","204","205"});
		AREA_CODE_MAP.put("652",new String[] {"100","101","122","123","200","201","222","223","300","301","302","323","324","325","327","328","700","701","722","723","800","801","822","823","824","825","826","827","828","829","900","901","922","923","924","925","926","927","928","929"});
		AREA_CODE_MAP.put("653",new String[] {"000","001","022","023","024","100","101","121","122","123","124","125","126","127","128","129","130","131","200","201","221","222","223","224","225","226","227"});
		AREA_CODE_MAP.put("654",new String[] {"000","002","003","021","022","023","024","025","026","027","028","200","201","202","221","223","224","225","226","300","301","321","322","323","324","325","326"});
		AREA_CODE_MAP.put("659",new String[] {"000","001","002","003","004"});
//		AREA_CODE_MAP.put("710",new String[] {"000"});
//		AREA_CODE_MAP.put("810",new String[] {"000"});
//		AREA_CODE_MAP.put("820",new String[] {"000"});


        List<String> provCityCodeSet = new ArrayList<>();
        Set<String> set = VarUtil.AREA_CODE_MAP.keySet();
        Iterator<String> iterator = set.iterator();
        while (iterator.hasNext()) {
            String key = iterator.next();
            String[] cityArr = VarUtil.AREA_CODE_MAP.get(key);
            for (String cityCode : cityArr) {
                provCityCodeSet.add(key + cityCode);
            }
        }
        provCityCodeArr =  provCityCodeSet.toArray(new String[provCityCodeSet.size()]);
        Arrays.sort(provCityCodeArr);
        List<String> errorProvCityCodeSet = new ArrayList<>();
        for(int i=1;i<=999999;i++){
            String code = formatProvCity(String.valueOf(i));
            if(!provCityCodeSet.contains(code)){
                errorProvCityCodeSet.add(code);
            }
        }
        errorProvCityCodeArr =  errorProvCityCodeSet.toArray(new String[errorProvCityCodeSet.size()]);
        Arrays.sort(errorProvCityCodeArr);
	}

    private static String formatProvCity(String str){
        int curLen = str.length();
        if(curLen!=6){
            for(int i=0;i<6-curLen;i++){
                str="0"+str;
            }
        }
        return str;
    }

	public static String[] CREDIT_CARD_PRIFIX = {
			"436742","622280","458123","521899","622260","402674","622892","622188","602969","622760",
			"409666","438088","622752","427020","427030","530990","622230","622235","622210","622215",
			"622200","955880","622568","520152","520382","911121","548844","512431","520194","622318",
			"622778","622282","407405","517636","512466","415599","421870","622622","528948","552288",
			"556610","622600","622601","622602","622603","421869","421871","628258","418152","456418",
			"622521","404738","404739","498451","622517","622518","515672","517650","525998","356850",
			"356851","356852","435744","622526","435745","998801","998802","622525","622538","406254",
			"622655","622650","622658","356839","486497","481699","543159","425862","406252","356837",
			"356838","356840","622161","628201","628202","622155","622156","528020","526855","539867",
			"528709","523959","622637","622636","528708","539868","518710","518718","622588","622575",
			"545947","521302","439229","552534","622577","622579","439227","479229","356890","356889",
			"356885","439188","545948","545623","552580","552581","552582","552583","552584","552585",
			"552586","552588","552589","645621","545619","356886","622578","622576","622581","439228",
			"439225","439226","628262","628362","376968","376966","622918","622916",
			"518212","622690","520108","376969","622919","556617","622680","403391","558916","514906",
			"400360","433669","433667","433666","404173","404172","404159","404158","403393","403392",
			"622689","622688","433668","404157","404171","404174","628209","628208","628206","451289",
			"622902","622901","527414","524070","486493","486494","451290","523036","486861","622922",
			"552599","404119","404121","519412","403361","558730","520083","520082","519413","404120",
			"404118","404117","622836","622837","622848","621268","622684","622884","53591","49102"};


	public static  char[] remove(char[] chars, String removes){
		Set<Character> set=new HashSet<Character>();
		for(int i=0;i<chars.length;i++) {
			if(removes.indexOf(chars[i])<0) {
				set.add(chars[i]);
			}
		}
		char[] r=new char[set.size()];
		int count=0;
		for(Character c: set) {
			r[count]=c;
			count++;
		}
		return r;
	}

	public static boolean hasSame(String[] strs) {
		if (getMap(strs).size() == strs.length)
			return false;
		return true;
	}

	public static boolean hasSame(char[] chars) {
		if (getMap(chars).size() == chars.length)
			return false;
		return true;
	}

	public static Set<String> getCities() {
		Set<String>  cities=new HashSet<String>();
		Iterator<String> keys=CITY_MAP.keySet().iterator();
		while(keys.hasNext()) {
			String[] strs=CITY_MAP.get(keys.next());
			for(String s:strs) {
				cities.add(s);
			}
		}
		return cities;
	}
	
	
	public static List<String> get1wordSurs() {
		List<String> surs = new ArrayList<String>();
		char[] singleSurs = CHAR_MAP.get(CharType.LAST_NAME).toCharArray();
		for (int i = 0; i < singleSurs.length; i++) {
			String surName = String.valueOf(singleSurs[i]);
			if (!surs.contains(surName))
				surs.add(surName);
		}
		return surs;
	}

	public static List<String> get2wordSurs() {
		List<String> surs = new ArrayList<String>();
		for (int i = 0; i < TWO_LAST_NAME.length; i++) {
			if (!surs.contains(TWO_LAST_NAME[i]))
				surs.add(TWO_LAST_NAME[i]);
		}
		return surs;
	}

	public static Set<String> getProvince() {

		return CITY_MAP.keySet();
	}
	
	public static char[] getChDict(String exclude) {
		char[] chars=null;
		if(StringUtils.isBlank(exclude)) {
			chars=(CHAR_MAP.get(CharType.CH_COMMON)+CHAR_MAP.get(CharType.LAST_NAME)+CHAR_MAP.get(CharType.STATE_ABBR)).toCharArray();
			return chars;
		}
		StringBuffer sb=new StringBuffer();
		for(char c: CHAR_MAP.get(CharType.CH_COMMON).toCharArray()) {
			if(exclude.indexOf(c)<0) {
				sb.append(c);
			}
		}
		for(char c: CHAR_MAP.get(CharType.LAST_NAME).toCharArray()) {
			if(exclude.indexOf(c)<0) {
				sb.append(c);
			}
		}
		for(char c: CHAR_MAP.get(CharType.STATE_ABBR).toCharArray()) {
			if(exclude.indexOf(c)<0) {
				sb.append(c);
			}
		}
		return sb.toString().toCharArray();
	}
	/**
	 * 获取CHAR_MAP中所有无重复字符
	 * @param exclude 排除该字符串中的所有字符
	 * @return 最终的字段
	 */
	public static char[] getAllDict(String exclude) {
		StringBuffer sb=new StringBuffer();
		Set<CharType> set=EnumUtil.toEnumSet(CharType.class);
		for(CharType type:set) {
			char[] chars=(CHAR_MAP.get(type)).toCharArray();
			for(int i=0;i<chars.length;i++) {
				if(StringUtils.isBlank(exclude)) {
					sb.append(chars[i]);
				}else {
					if(exclude.indexOf(chars[i])<0) {
						sb.append(chars[i]);
					}
				}
			}
		}		
		return sb.toString().toCharArray();
	}

	/**
	 * 检查数据是否合法,要求:
	 * 1. 每个数组中没有重复数据
	 * 2. 每个MAP中没有重复数据
	 * 3. 哪个数据重复,抛出异常,可以知道哪个数据重复
	 * @return
	 * @throws Exception
	 */
	public static boolean checkData() throws Exception{
        boolean boo=true;
		List<Character> list = new ArrayList<Character>();
		for (CharType str1:CHAR_MAP.keySet()) {
            char[] chars = CHAR_MAP.get(str1).toCharArray();
            for(int i=0; i<chars.length; i++){
                if(!list.contains(chars[i])){
                    list.add(chars[i]);
                }else {
                    boo=false;
                    throw new Exception("CHAR_MAP的"+str1+"重复元素为："+chars[i]);
                }
            }

        }
        for (String str2:AREA_CODE_MAP.keySet()) {
            String[] str = AREA_CODE_MAP.get(str2);
            for(int i=0; i<str.length; i++){
                List<String> listAreaCode = new ArrayList<String>();
                if(!listAreaCode.contains(str[i])){
					listAreaCode.add(str[i]);
                }else {
                    boo=false;
                    throw new Exception("AREA_CODE_MAP的"+str2+"位置的重复元素为："+str[i]);
                }
            }

        }
        for (String str3:CITY_MAP.keySet()) {
            String[] str = CITY_MAP.get(str3);
            for(int i=0; i<str.length; i++){
                List<String> listCity = new ArrayList<String>();
                if(!listCity.contains(str[i])){
					listCity.add(str[i]);
                }else {
                    boo=false;
                    throw new Exception("CITY_MAP的"+str3+"位置的重复元素为："+str[i]);
                }
            }

        }
		List<String> listCompany = new ArrayList<String>();
		for (int i=0; i<COMPANY_SUFFIX.length; i++) {
            if(!listCompany.contains(COMPANY_SUFFIX[i])){
				listCompany.add(COMPANY_SUFFIX[i]);
            }else {
                boo=false;
                throw new Exception("COMPANY_SUFFIX数组的重复元素为："+COMPANY_SUFFIX[i]);
            }
        }
		List<String> listEmail = new ArrayList<String>();
		for (int i=0; i<EMAIL_SUFFIX.length; i++) {
            if(!listEmail.contains(EMAIL_SUFFIX[i])){
				listEmail.add(EMAIL_SUFFIX[i]);
            }else {
                boo=false;
                throw new Exception("EMAIL_SUFFIX数组的重复元素为："+EMAIL_SUFFIX[i]);
            }
        }
		List<String> listTwoLAstName = new ArrayList<String>();
		for (int i=0; i<TWO_LAST_NAME.length; i++) {
            if(!listTwoLAstName.contains(TWO_LAST_NAME[i])){
				listTwoLAstName.add(TWO_LAST_NAME[i]);
            }else {
                boo=false;
                throw new Exception("TWO_LAST_NAME数组的重复元素为："+TWO_LAST_NAME[i]);
            }
        }
		List<String> listMobil = new ArrayList<String>();
		for (int i=0; i<MOBIL_PREFIX.length; i++) {
            if(!listMobil.contains(MOBIL_PREFIX[i])){
				listMobil.add(MOBIL_PREFIX[i]);
            }else {
                boo=false;
                throw new Exception("MOBIL_PREFIX数组的重复元素为："+MOBIL_PREFIX[i]);
            }
        }
		List<String> listTelArea = new ArrayList<String>();
		for (int i=0; i<TEL_AREA.length; i++) {
            if(!listTelArea.contains(TEL_AREA[i])){
				listTelArea.add(TEL_AREA[i]);
            }else {
                boo=false;
                throw new Exception("TEL_AREA数组的重复元素为："+TEL_AREA[i]);
            }
        }
		List<String> listcreditStr = new ArrayList<String>();
		for (int i=0; i<CREDIT_CARD_PRIFIX.length; i++) {
            if(!listcreditStr.contains(CREDIT_CARD_PRIFIX[i])){
				listcreditStr.add(CREDIT_CARD_PRIFIX[i]);
            }else {
                boo=false;
                throw new Exception("CREDIT_CARD_PRIFIX数组的重复元素为："+CREDIT_CARD_PRIFIX[i]);
            }
        }

		return boo;
	}


	/**
	 * 把XML中的配置的变量加载到当前类中
	 * @param xmlFile
	 */
	public static void loadFromXml(String xmlFile) throws Exception {
		Document doc = XmlUtil.getXMLDocFromFile(xmlFile);
		String str="/CHAR_MAP/CH_COMMON,/CHAR_MAP/EN_CHARS,/CHAR_MAP/NUMBER,/CHAR_MAP/LAST_NAME,/CHAR_MAP/STATE_ABBR,/CITY_MAP,/AREA_CODE_MAP," +
				"/CREDIT_CARD_PRIFIX,/TEL_AREA,/MOBIL_PREFIX,/TWO_LAST_NAME,/EMAIL_SUFFIX,/COMPANY_SUFFIX";
		String city="河北省,山西省,内蒙古自治区,辽宁省,吉林省,黑龙江省,江苏省,浙江省,福建省,江西省,山东省,河南省,湖北省,湖南省,广东省,广西壮族自治区,海南省,四川省,贵州省,云南省," +
				"陕西省,甘肃省,青海省,西藏自治区,安徽省,宁夏回族自治区,台湾省,新疆维吾尔自治区,北京市,天津市,上海市,重庆市,香港特别行政区,澳门特别行政区";
		String area="110,120,130,131,140,141,150,152,210,211,220,222,230,231,232,310,320,321,330,331,340,341,350,360,361,370,371,410,411,419,420,421,422,429,430,431,433,440,441,442,445,450,451,460,469,500,510,511,512,513,520,522,530,532,533,540,542,610,611,620,621,622,623,630,632,640,650,652,653,654,659,710,810,820";
		String xPathStr = "/VARS";
		String[] pathStr = str.split(",");
		String[] cityStr = city.split(",");
		String[] areaStr = area.split(",");
		StringBuilder sb=new StringBuilder();
		for (String sp:pathStr) {
			if (sp.equals("/CITY_MAP")){
				Map<String,String[]> cityNew=new HashMap<String,String[]>();
				for (String sc:cityStr) {
					sb.append(xPathStr).append(sp).append("/PROVINCE[@NAME='"+sc+"']");
					String txt = XmlUtil.getTxt(doc, sb.toString());
					cityNew.put(sc,txt.split(","));
					sb.setLength(0);
				}
				CITY_MAP=cityNew;

				StringBuilder sb1=new StringBuilder();
				for (String arr:CITY_MAP.keySet()){
					sb1.append(arr+":").append(CITY_MAP.get(arr)[0]).append(CITY_MAP.get(arr)[1]).append("  ");
				}
				System.out.println(sb1.toString());

			} else if (sp.equals("/AREA_CODE_MAP")) {
				Map<String,String[]> areaCodeNew=new HashMap<String,String[]>();
				for (String sc:areaStr) {
					sb.append(xPathStr).append(sp).append("/AREA[@CODE='"+sc+"']");
					String txt = XmlUtil.getTxt(doc, sb.toString());
					areaCodeNew.put(sc,txt.split(","));
					sb.setLength(0);
				}
				AREA_CODE_MAP=areaCodeNew;
				StringBuilder sb1=new StringBuilder();

				for (String arr:AREA_CODE_MAP.keySet()){
					sb1.append(arr+":").append(AREA_CODE_MAP.get(arr)[0]).append("---");
				}
				System.out.println(sb1.toString());

			}else {
				sb.append(xPathStr).append(sp);
				Map<String, String> propArr = XmlUtil.getProp(doc, sb.toString());
				sb.setLength(0);
				for (String s:propArr.keySet()) {
					if (s.equals("COMPANY_SUFFIX")){
						COMPANY_SUFFIX=propArr.get(s).split(",");
					}else if (s.equals("EMAIL_SUFFIX")){
						EMAIL_SUFFIX=propArr.get(s).split(",");
					}else  if (s.equals("TWO_LAST_NAME")){
						TWO_LAST_NAME=propArr.get(s).split(",");
					}else if (s.equals("MOBIL_PREFIX")){
						MOBIL_PREFIX=propArr.get(s).split(",");
					}else if (s.equals("TEL_AREA")){
						TEL_AREA=propArr.get(s).split(",");
					}else if (s.equals("CREDIT_CARD_PRIFIX")){
						CREDIT_CARD_PRIFIX=propArr.get(s).split(",");
					}
					if (s.equals("CH_COMMON")){
						CHAR_MAP.put(CharType.CH_COMMON,propArr.get(s));
					}else if (s.equals("EN_CHARS")){
						CHAR_MAP.put(CharType.EN_CHARS,propArr.get(s));
					}else if (s.equals("NUMBER")){
						CHAR_MAP.put(CharType.NUMBER,propArr.get(s));
					}else if (s.equals("LAST_NAME")){
						CHAR_MAP.put(CharType.LAST_NAME,propArr.get(s));
					}else if (s.equals("STATE_ABBR")){
						CHAR_MAP.put(CharType.STATE_ABBR,propArr.get(s));
					}
				}
			}
		}
		for (CharType str1:CHAR_MAP.keySet()) {
			System.out.println(str1+":"+CHAR_MAP.get(str1));
		}
	}

    /**
     * 把当前类中的数据加载到xml文件中
     * @param xmlFile
     */
	public static void writeToXml(String xmlFile) throws Exception {

		OutputStream outputStream=new FileOutputStream(xmlFile) ;
		StringBuffer sb=new StringBuffer();
		sb.append("<VARS>").append("\n\t").append("<CHAR_MAP>").append("\n\t");
		for (CharType strc:CHAR_MAP.keySet()) {

			String str = strc.toString();
			if (str.equals("CH_COMMON")){
				sb.append("<CH_COMMON>").append(CHAR_MAP.get(strc)).append("</CH_COMMON>");
			}else if (str.equals("EN_CHARS")){
				sb.append("<EN_CHARS>").append(CHAR_MAP.get(strc)).append("</EN_CHARS>");
			}else if (str.equals("NUMBER")){
				sb.append("<NUMBER>").append(CHAR_MAP.get(strc)).append("</NUMBER>");
			}else if (str.equals("LAST_NAME")){
				sb.append("<LAST_NAME>").append(CHAR_MAP.get(strc)).append("</LAST_NAME>");
			}else if (str.equals("STATE_ABBR")){
				sb.append("<STATE_ABBR>").append(CHAR_MAP.get(strc)).append("</STATE_ABBR>");
			}
				sb.append("\n\t");
		}
        sb.append("</CHAR_MAP>").append("\n\t").append("<CITY_MAP>").append("\n\t");
		for (String str:CITY_MAP.keySet()) {
			String s=Arrays.toString(CITY_MAP.get(str));
			s=s.replace(" ","");
			sb.append("<PROVINCE NAME=\"").append(str).append("\">").append(s.substring(1,s.length()-1)).append("</PROVINCE>").append("\n\t");
		}
		sb.append("</CITY_MAP>").append("\n\t").append("<AREA_CODE_MAP>").append("\n\t");
		for (String str:AREA_CODE_MAP.keySet()) {
			String s=Arrays.toString(AREA_CODE_MAP.get(str));
			s=s.replace(" ","");
			sb.append("<AREA CODE=\"").append(str).append("\">").append(s.substring(1,s.length()-1)).append("</AREA>").append("\n\t");
		}
		sb.append("</AREA_CODE_MAP>").append("\n\t");
		String creditStr=Arrays.toString(CREDIT_CARD_PRIFIX);
		creditStr=creditStr.replace(" ","");
		creditStr=creditStr.substring(1,creditStr.length()-1);
		sb.append("<CREDIT_CARD_PRIFIX>").append(creditStr).append("</CREDIT_CARD_PRIFIX>").append("\n\t");

		String telStr=Arrays.toString(TEL_AREA);
		telStr=telStr.replace(" ","");
		telStr=telStr.substring(1,telStr.length()-1);
		sb.append("<TEL_AREA>").append(telStr).append("</TEL_AREA>").append("\n\t");

		String mobilStr=Arrays.toString(MOBIL_PREFIX);
		mobilStr=mobilStr.replace(" ","");
		mobilStr=mobilStr.substring(1,mobilStr.length()-1);
		sb.append("<MOBIL_PREFIX>").append(mobilStr).append("</MOBIL_PREFIX>").append("\n\t");

		String twoStr=Arrays.toString(TWO_LAST_NAME);
		twoStr=twoStr.replace(" ","");
		twoStr=twoStr.substring(1,twoStr.length()-1);
		sb.append("<TWO_LAST_NAME>").append(twoStr).append("</TWO_LAST_NAME>").append("\n\t");

		String emailStr=Arrays.toString(EMAIL_SUFFIX);
		emailStr=emailStr.replace(" ","");
		emailStr=emailStr.substring(1,emailStr.length()-1);
		sb.append("<EMAIL_SUFFIX>").append(emailStr).append("</EMAIL_SUFFIX>").append("\n\t");

		String companyStr=Arrays.toString(COMPANY_SUFFIX);
		companyStr=companyStr.replace(" ","");
		companyStr=companyStr.substring(1,companyStr.length()-1);
		sb.append("<COMPANY_SUFFIX>").append(companyStr).append("</COMPANY_SUFFIX>").append("\n");
		sb.append("</VARS>");
		byte[] bytes = sb.toString().getBytes();
		outputStream.write(bytes);
		outputStream.close();
    }
	private static Map<String, Integer> getMap(String[] strs){
		Map<String, Integer> map=new HashMap<String,Integer>();
		for(int i=0;i<strs.length;i++) {
			int v=1;
			if(map.containsKey(strs[i])) {
				v=map.get(strs[i]);
				v++;
			}
			map.put(strs[i], v);
		}
		return map;
	}

	private static Map<Character, Integer> getMap(char[] chars){
		Map<Character, Integer> map=new HashMap<Character,Integer>();
		for(int i=0;i<chars.length;i++) {
			int v=1;
			if(map.containsKey(chars[i])) {
				v=map.get(chars[i]);
				v++;
			}
			map.put(chars[i], v);
		}
		return map;
	}

	public static void main(String[] args) {
	}

}
